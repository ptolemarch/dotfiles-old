#! /bin/sh
# vim: ts=4 sw=4 et ai

# one-line installation of dotfiles:
#  curl -L bootstrap.yadm.io | bash -s -- https://github.com/ptolemarch/dotfiles.git

# NOTE I'll need to enter my GitHub Personal Access Token
# (see https://github.com/settings/tokens) and the symmetric password
# to decrypt the contents of .dotfiles-private

# I had *really* wanted to make this portable, but the script needs
# to run YADM commands, and to do that it needs to source the YADM bootstrap
# stuff, which requires bashisms.
# execute script with bash (shebang line is /bin/sh for portability)
if [ -z "$BASH_VERSION" ]; then
    command -v bash && exec bash "$0" "$@"
    echo "sorry, I need bash, but this isn't bash,"
    echo "and I can't even find it to run it instead"
    exit 1

    # actually, if the only problem is sourcing the YADM bootstrap,
    # presumably I could make this dependent on either bash or YADM.
fi

## =====================================================================
##  configuration
## ---------------------------------------------------------------------

_YADM_BOOTSTRAP_URL='bootstrap.yadm.io'
_DOTFILES_REPO='https://github.com/ptolemarch/dotfiles.git'
_YADM_CONFIG_DIR="$HOME/.config/yadm"

export GPG_TTY=$(tty)

## =====================================================================
##  functions
## ---------------------------------------------------------------------

_blurt()
{
    printf "$@" 1>&2
}

_warn()
{
    for line in "$@"; do
        echo "$line" 1>&2
    done
}

_die()
{
    errval="$1"; shift
    _warn "$@"
    exit "$errval"
}

is_command_present()
{
    command="$1"; shift

    command -v "$command" > /dev/null 2>&1
}

assert_commands_present()
{
    for command in "$@"; do
        _blurt "checking for '$command'... "
        if is_command_present "$command"; then
            which "$command"
        else
            _die 1 "can't find command '$command' installed," \
                   "  which I require"
        fi
    done
}

source_yadm_bootstrap()
{
    if is_command_present yadm; then
        _warn "yadm was found installed. I wasn't expecting this," \
              "  but perhaps we can continue with the yadm you have."

        if yadm version | grep 'yadm 2'; then
            _warn "yadm version 2 found; probably safe to proceed"
        else
            _die 1 "yadm found, but not version 2; I haven't coded for this."
        fi
    fi

    _warn "attempting to make temporary file (to source yadm bootstrap)"
    yadm_bootstrap_temp=`mktemp` \
    || _die 1 "can't make temporary file for YADM bootstrap"
    _warn "made temporary YADM bootstrap file: '$yadm_bootstrap_temp'"

    curl -L "$_YADM_BOOTSTRAP_URL" > "$yadm_bootstrap_temp"
    . "$yadm_bootstrap_temp" > /dev/null
    rm "$yadm_bootstrap_temp"

    if is_command_present yadm; then :; else
        _die 1 "yadm should exist at this moment (probably as a function)" \
               "  but it doesn't exist. I can't proceed without it."
    fi
}

enable_decrypt_under_sudo()
{
    local tty="$(tty)"

    # is tty writable by us? If not, pinentry prolly won't work.
    if [[ -w "$tty" ]]; then :; else
        _warn "It looks like gpg isn't going to work in the normal way," \
              "so let's try to work around that."

        yadm config yadm.gpg-program "$_YADM_CONFIG_DIR/bin/yadm-gpg" \
        || _die 1 "My attempt to get gpg to work seems to have failed." \
                  "Stopping here before I mess anything up further."
        
        _warn "...okay, here goes nothing"
    fi
}

is_file_present()
{
    local file="$1"

    [[ -a "$HOME/$1" ]]
}

## =====================================================================
##  main program
## ---------------------------------------------------------------------

cd "$HOME" || die 1 "can't cd to '$HOME'"

# empty string
problems=

# if these commands aren't installed, die quickly
assert_commands_present git

# get temporary yadm
source_yadm_bootstrap

#
# From here on, if things break, I probably just want to note it and keep going 
#

# I prefer using Git over SSH
yadm remote set-url origin git@github.com:ptolemarch/dotfiles.git \
|| problems="$(( problems + 1 ))"

# do the next two steps one right after the other, because both
# will require the entry of the GitHub PAT. I can just paste it twice.

# NOTE that it is tempting to just do what I did above, and set the
# submodule's URL to use SSH. But this would change the repo in a way that
# we'd be tempted to push to origin. AND WE DON'T WANT TO DO THAT. We need the
# .dotfiles-private submodule to come in over HTTPS. We can't fetch over SSH
# until we have our SSH keys installed, but .dotfiles-private is where our SSH
# keys are stored.

# update submodules, including .dotfiles-private
yadm submodule update --init --recursive \
|| problems="$(( problems + 1 ))"

# take steps to store GitHub PAT
cd .dotfiles-private                || problems="$(( problems + 1 ))"
git config credential.helper store  || problems="$(( problems + 1 ))"
git fetch                           || problems="$(( problems + 1 ))"
cd ..                               || problems="$(( problems + 1 ))"

# pull most recent remote of all submodules
yadm submodule update --recursive --remote \
|| problems="$(( problems + 1 ))"

# decrypt .dotfiles-private
enable_decrypt_under_sudo
yadm decrypt                        || problems="$(( problems + 1 ))"

# plenv: for some reason, perl-build isn't included by default
git clone \
    https://github.com/tokuhirom/Perl-Build.git \
    "$HOME/.perl5/plenv/plugins/perl-build" \
|| problems="$(( problems + 1 ))"

# SOMETHING THAT MIGHT BE NICE AT THIS POINT:
# - build me a sane perl, right now
# - install cpanm
# - install minicpan and download that sucker (possibly in the background)
# - install rakubrew https://rakubrew.org/
#   - on Mac: https://rakubrew.org/macos/rakubrew
#   - other Unix: https://rakubrew.org/perl/rakubrew
#   (and then run `rakubrew mode shim`, apparently)
#   (first I'd want to set RAKUBREW_HOME to whatever it is in .zsh/.zshrc)

# look for problematic files
if is_command_present '.vimrc'; then
    _warn "WARNING: file ~/.vimrc is present!" \
          "  These dotfiles use ~/.vim/vimrc, but Vim will use .vimrc instead" \
          "  if it is present. You should remove this file or consolidate" \
          "  it into ~/.vim/vimrc"
    problems="$(( problems + 1 ))"
fi

# sign off
if [ -z "$problems" ]; then
    _warn "Everything seems to have worked! (problem count: $problems)." \
          "You probably want to log out and back in now."

    exit 0
else
    _warn "ATTENTION! THERE WERE PROBLEMS! (problem count: $problems)" \
          "Sorry. You should probably look into them before logging out."

    exit $problems
fi

_die 99 "~~~~ the script never should have reached this line ~~~~"
